{"version":3,"sources":["components/icons/swap.svg","components/icons/right.svg","reducers/index.js","reducers/conversionRates.js","reducers/convertInput.js","axios/index.js","axios/API_KEY.js","components/CalculatorOutput.js","components/CalculatorInput.js","actions/index.js","components/Calculator.js","components/App.js","index.js"],"names":["module","exports","combineReducers","form","formReducer","plugin","CalculatorInput","state","action","type","values","payload","rates","output","amount","input_currency","output_currency","Number","toFixed","rateGet","axios","get","CalculatorOutput","className","disabled","value","this","props","Component","connect","renderInput","input","label","meta","renderError","renderSelect","error","touched","Alert","variant","makeRequest","convertCurrency","Field","name","component","src","require","onClick","swapFields","alt","inputForm","dispatch","a","response","data","conversion_rates","getState","reduxForm","validate","errors","isNaN","Calculator","App","href","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1821d470.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swap.8882091a.svg\";","module.exports = __webpack_public_path__ + \"static/media/right.0ed2ecd4.svg\";","import { combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport conversionRates from \"./conversionRates\";\nimport convertInput from \"./convertInput\";\n\nexport default combineReducers({\n  form: formReducer.plugin({\n    CalculatorInput: (state, action) => {\n      if (action.type === \"SWAP_FIELDS\") {\n        return {\n          ...state,\n          values: {\n            ...state.values,\n            ...action.payload,\n          },\n        };\n      }\n      return state;\n    },\n  }),\n  rates: conversionRates,\n  output: convertInput,\n});\n","export default function conversionRates(state = {}, action) {\n  if (action.type === \"RATE_DATA\") {\n    return { ...state, ...action.payload };\n  } else return state;\n}\n","export default function convertInput(state = \"\", action) {\n  if (action.type === \"CONVERT_CURRENCY\" && action.payload) {\n    // console.log(action);\n    const { amount, input_currency, output_currency } = action.payload;\n    if (amount && input_currency && output_currency) {\n      return (\n        (Number(amount) / action.rates[input_currency]) *\n        action.rates[output_currency]\n      ).toFixed(2);\n    }\n  }\n  return state;\n}\n","import axios from \"axios\";\nimport { API_KEY } from \"./API_KEY\";\n\nfunction rateGet(values) {\n  return axios.get(`https://v6.exchangerate-api.com/v6/${API_KEY}/latest/USD`);\n}\n\nexport default rateGet;\n","export const API_KEY = \"5c22ea66b77aa723f3d2c862\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass CalculatorOutput extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"input\">\n          <input className=\"output\" disabled value={this.props.output} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    output: state.output,\n  };\n};\n\nexport default connect(mapStateToProps)(CalculatorOutput);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Alert } from \"react-bootstrap\";\nimport { makeRequest, convertCurrency, swapFields } from \"../actions\";\n\nimport CalculatorOutput from \"./CalculatorOutput\";\n\nclass CalculatorInput extends Component {\n  // This shows error messages if you haven't correctly inputted shit\n  renderError({ error, touched }) {\n    // error and touched are destructured from the meta argument - these are passed in through redux form\n    if (touched && error) {\n      return (\n        // If the input is touched, and an error is passed in (the errors are specified in the validate\n        // function which is then connected to the component as a prop) then an error is displayed\n        <Alert variant=\"danger\" className=\"error\">\n          {error}\n        </Alert>\n      );\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    return (\n      <div className=\"input\">\n        <label className=\"label\">{label}</label>\n\n        <input {...input} />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  renderSelect = ({ input, label, meta }) => {\n    return (\n      <div className=\"currency-select input\">\n        <label className=\"label\">{label}</label>\n        <select {...input}>\n          <option />\n          <option value=\"USD\">US Dollars (USD)</option>\n          <option value=\"GBP\">Pound Sterling (GBP)</option>\n          <option value=\"EUR\">Euro (EUR)</option>\n          <option value=\"AED\">Emirati Dirham (AED)</option>\n          <option value=\"AUD\">Australian dollar (AUD)</option>\n          <option value=\"CAD\">Canadian Dollar (CAD)</option>\n          <option value=\"HKD\">Hong Kong Dollar (HKD)</option>\n          <option value=\"JPY\">Japanese Yen (JPY)</option>\n          <option value=\"NZD\">New Zealand Dollar (NZD)</option>\n          <option value=\"SGD\">Singapore Dollar (SGD)</option>\n        </select>\n      </div>\n    );\n  };\n\n  componentDidMount() {\n    this.props.makeRequest();\n  }\n  componentDidUpdate({ convertCurrency }) {\n    convertCurrency();\n  }\n\n  render() {\n    return (\n      <form className=\"input-form\">\n        <div className=\"currencies\">\n          <Field\n            name=\"input_currency\"\n            label=\"From:\"\n            component={this.renderSelect}\n          />\n          <img\n            className=\"icon icon--swap\"\n            src={require(\"./icons/swap.svg\")}\n            onClick={this.props.swapFields}\n            alt=\"swap currencies\"\n          />\n\n          <Field\n            name=\"output_currency\"\n            label=\"To:\"\n            component={this.renderSelect}\n          />\n        </div>\n        <div className=\"amounts\">\n          <Field name=\"amount\" label=\"Amount: \" component={this.renderInput} />\n          <img\n            className=\"icon\"\n            src={require(\"./icons/right.svg\")}\n            alt=\"equals\"\n          />\n\n          <CalculatorOutput />\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = (values) => {\n  const errors = {};\n  if (isNaN(Number(values.amount))) {\n    errors.amount = errors.amount ? errors.amount : \"Please use numbers only\";\n  }\n  return errors;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    rates: state.rates,\n    inputForm: state.form,\n  };\n};\nCalculatorInput = connect(mapStateToProps, {\n  makeRequest,\n  convertCurrency,\n  swapFields,\n})(CalculatorInput);\n\nexport default reduxForm({ form: \"CalculatorInput\", validate })(\n  CalculatorInput\n);\n","import rateGet from \"../axios\";\n\nexport const makeRequest = () => async (dispatch) => {\n  let response = await rateGet();\n  dispatch({\n    type: \"RATE_DATA\",\n    payload: response.data.conversion_rates,\n  });\n};\n\nexport const convertCurrency = () => (dispatch, getState) => {\n  const rates = getState().rates;\n  const payload = getState().form.CalculatorInput.values;\n  dispatch({\n    type: \"CONVERT_CURRENCY\",\n    payload: payload,\n    rates: rates,\n  });\n};\n\nexport const swapFields = () => (dispatch, getState) => {\n  const input_currency = getState().form.CalculatorInput.values.output_currency;\n  const output_currency = getState().form.CalculatorInput.values.input_currency;\n  dispatch({\n    type: \"SWAP_FIELDS\",\n    payload: {\n      input_currency,\n      output_currency,\n    },\n  });\n};\n","import React, { Component } from \"react\";\nimport CalculatorInput from \"./CalculatorInput\";\nexport default class Calculator extends Component {\n  render() {\n    return (\n      <div className=\"calculator\">\n        <CalculatorInput />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../master.css\";\n\nimport Calculator from \"./Calculator\";\nexport default function App() {\n  return (\n    <div>\n      <h1 className=\"title\">Exchange Rate Calculator</h1>\n      <p className=\"title__subheader\">This economy eh...</p>\n      <Calculator />\n      <a href=\"https://www.exchangerate-api.com\">\n        Currency Conversion by ExchangeRate-API.com\n      </a>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducers from \"./reducers\";\nimport App from \"./components/App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}